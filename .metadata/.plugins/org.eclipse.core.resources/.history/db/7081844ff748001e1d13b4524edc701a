package bank.service;

import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import bank.controller.model.BankAccount;
import bank.dao.AccountDao;
import bank.dao.BankDao;
import bank.dao.ClientDao;
import bank.entity.Account;
import bank.entity.Bank;
import pet.store.controller.model.PetStoreCustomer;
import pet.store.controller.model.PetStoreData;
import pet.store.controller.model.PetStoreEmployee;
import pet.store.entity.Customer;
import pet.store.entity.Employee;
import pet.store.entity.PetStore;

@Service
//Where data is transformed from DTOs into the JPA entities.
public class BankService {
	
	@Autowired
	private BankDao bankDao;
	
	@Autowired
	private AccountDao accountDao;
	
	@Autowired
	private ClientDao clientDao;
	
  @Transactional(readOnly = false)
	public BankData saveBank(BankData bankData) {
		Long bankId = bankData.bankId();
		Bank bank = findOrCreateBank(bankId);
		
		copyBankFields(bank, bankData);
	
		return new BankData(bankDao.save(bank));
	}

	private void copyBankFields(Bank bank, BankData bankData) {
	
		
		
		bank.setBankId(bankData.getBankId());	
	    bank.setBankName(bankData.getBankName());
	    bank.setBankAddress(bankData.getBankAddress());	
	    bank.setBankCity(bankData.getPetStoreCity());
	    bank.setBankState(bankData.getPetStoreState());
	    bank.setBankZip(bankData.getPetStoreZip());
	    bank.setBankPhone(bankData.getPetStorePhone());
	}

	private Bank findOrCreateBank(Long bankId) {
		
		if(Objects.isNull(bankId)) {
			return  new Bank();
		}else {
			return findBankById(bankId);
		}
	
	}
		private Bank findBankById(Long bankId) {
			return bankDao.findById(bankId)
					.orElseThrow(() -> new NoSuchElementException(
							"Bank with ID=" + bankId + " was not found."));
		}
        @Transactional(readOnly = false)
		public BankAccount saveAccount( Long bankId, BankAccount bankAccount) {
            Bank bank= findBankById(bankId);
        
        	Account account = findOrCreateAccount(accountId, bankAccount.getAccountId());
            
        	copyAccountFields(account, bankAccount);
        	
        	account.setBank(bank);
        	bank.getAccount().add(account);
        	
        	return new BankAccount (accountDao.save(account));
        }

		private void copyAccountFields(Account account, BankAccount bankAccount) {
			 account.setAccountId(bankAccount.getAccountId());
			 
			 account.setAccountNumber(bankAccount.getAccountNumber());
			 account.setaccountBalance(bankAccount.getAccountBalance());
		
			 
			
		//		private String accountNumber;
		//		private String accountBalance;
				
		}

		private Account findOrCreateAccount(Long bankId, Long accountId) {
			if(Objects.isNull(accountId)) {  
			return new Account();
		}else {
			return findAccountById(bankId, accountId);
		}
		}	
		

		private Account findAccountById(Long bankId, Long accountId) {
			Account account =  accountDao.findById(accountId)
					.orElseThrow(() -> new NoSuchElementException("Account with ID=" + accountId + " was not found."));
			
			if(account.getBank().getBankId()!= bankId ) {
				throw new IllegalArgumentException(
						"Account with ID="+ accountId + " does not belong to bank  with ID=" + bankId + ".");
			}
		}
		 @Transactional(readOnly = false)
			public PetStoreCustomer saveCustomer(Long petStoreId, PetStoreCustomer petStoreCustomer) {
				PetStore petStore = findPetStoreById(petStoreId); 
				Customer customer = findOrCreateCustomer(petStoreId, petStoreCustomer.getCustomerId());
			      
			      copyCustomerFields(customer, petStoreCustomer);
			      
			      customer.getPetStores().add(petStore);
			      
			      petStore.getCustomers().add(customer);
			    
				return new PetStoreCustomer (customerDao.save(customer));
			}

			private void copyCustomerFields(Customer customer, PetStoreCustomer petStoreCustomer) {
				customer.setCustomerId(petStoreCustomer.getCustomerId());
				customer.setCustomerFirstName(petStoreCustomer.getCustomerFirstName());
				customer.setCustomerLastName(petStoreCustomer.getCustomerLastName());
				customer.setCustomerEmail(petStoreCustomer.getCustomerEmail());
				
			}

			private Customer findOrCreateCustomer(Long petStoreId, Long customerId) {
				if(Objects.isNull(customerId)) {  
				return new Customer();
			}else {
				return findCustomerById(petStoreId, customerId);
			}
			}	
			

			private Customer findCustomerById(Long petStoreId, Long customerId) {
				Customer customer =  customerDao.findById(customerId)
						.orElseThrow(() -> new NoSuchElementException("Customer with ID=" + customerId + " was not found."));
				boolean found = false;
				
				for (PetStore petStore: customer.getPetStores()) {
					if (petStore.getPetStoreId()== petStoreId) {
						found = true;
						break;
						
					}
				}
				
				if(!found ) {
					throw new IllegalArgumentException(
							"Customer with ID="+ customerId + " does not shop at pet store with ID=" + petStoreId + ".");
				}
					return customer;
			
			}
            @Transactional(readOnly = true)
			public List<PetStoreData> retrieveAllPetStores() {
                 
            	List<PetStoreData> petStoreData = new LinkedList<>();
            	
            	for (PetStore petStore: petStoreDao.findAll()) {
            		
            		PetStoreData psd = new PetStoreData(petStore);
            		
            		psd.getCustomers().clear();
            		psd.getEmployees().clear();
            		petStoreData.add(psd);
            	}
            	
            	 return petStoreData;
            	}
             @Transactional(readOnly = true)
             public PetStoreData retrievePetStoreById(Long petStoreId) {
            	 
            	 return new PetStoreData(findPetStoreById(petStoreId));
             }
             
             public void deletePetStoreById(Long petStoreId) {
             	
             	PetStore petStore = findPetStoreById(petStoreId);
             	
             	petStoreDao.delete(petStore);
             	
             
             }
         }	
         	
             
       
             
			
				
			
			

	

